define("local_coursedynamicrules/conditions",["exports","core/inplace_editable","core/templates","core/notification","core/pending","core/prefetch","core/str","core_form/dynamicform","core/toast","core/fragment","core_form/changechecker","local_coursedynamicrules/local/selectors"],(function(_exports,_inplace_editable,_templates,_notification,_pending,_prefetch,_str,_dynamicform,_toast,_fragment,_changechecker,_selectors){function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.init=void 0,_templates=_interopRequireDefault(_templates),_notification=_interopRequireDefault(_notification),_pending=_interopRequireDefault(_pending),_dynamicform=_interopRequireDefault(_dynamicform),_selectors=_interopRequireDefault(_selectors);let courseId=0,ruleId=0,contextId=0;const initConditionCardForm=conditionCard=>{const formContainer=conditionCard.querySelector(_selectors.default.regions.conditionFormContainer),form=new _dynamicform.default(formContainer,"\\local_coursedynamicrules\\form\\conditions\\condition_form");return form.addEventListener(form.events.FORM_SUBMITTED,(data=>{const heading=conditionCard.querySelector(_selectors.default.regions.conditionHeading),description=conditionCard.querySelector(_selectors.default.regions.conditionDescription);return data.detail.instanceid&&(conditionCard.dataset.conditionId=data.detail.instanceid),data.detail.heading&&(heading.innerHTML=data.detail.heading),data.detail.description&&(description.innerHTML=data.detail.description),closeConditionCardForm(conditionCard),(0,_str.getString)("changessaved","moodle").then(_toast.add)})),form.addEventListener(form.events.FORM_CANCELLED,(()=>{conditionCard.dataset.conditionId>0?closeConditionCardForm(conditionCard):removeConditionCard(conditionCard)})),form},closeConditionCardForm=conditionCard=>{const form=conditionCard.querySelector(_selectors.default.regions.conditionFormContainer),newForm=form.cloneNode(!1);conditionCard.querySelector(_selectors.default.regions.conditionForm).replaceChild(newForm,form);const description=conditionCard.querySelector(_selectors.default.regions.conditionDescription),editBtn=conditionCard.querySelector(_selectors.default.actions.conditionEdit),deleteBtn=conditionCard.querySelector(_selectors.default.actions.conditionDelete);description&&description.classList.remove("hidden"),editBtn&&(editBtn.disabled=!1),deleteBtn&&(deleteBtn.disabled=!1)},removeConditionCard=conditionCard=>{conditionCard.remove();if(0===document.querySelector(_selectors.default.regions.conditionsContainer).querySelectorAll(_selectors.default.regions.conditionCard).length){const emptyMessage=document.querySelector(_selectors.default.regions.conditionEmptyMessage);emptyMessage&&emptyMessage.classList.remove("hidden")}};let initialized=!1;_exports.init=args=>{(0,_prefetch.prefetchStrings)("local_coursedynamicrules",["conditionadded","deletecondition","deleteconditioncheck","deletedcondition"]),(0,_prefetch.prefetchStrings)("core",["delete"]),ruleId=args.ruleid,courseId=args.courseid,contextId=args.contextid,initialized||(document.addEventListener("click",(event=>{const conditionAdd=event.target.closest(_selectors.default.actions.conditionAdd);conditionAdd&&(event.preventDefault(),((className,title)=>{const pending=new _pending.default("local_coursedynamicrules/conditions:add"),container=document.querySelector(_selectors.default.regions.conditionsContainer),cardsCount=container.querySelectorAll(_selectors.default.regions.conditionCard).length,params={classname:className,ruleid:ruleId,courseid:courseId,showormessage:cardsCount>0,title:title};(0,_fragment.loadFragment)("local_coursedynamicrules","condition_form",contextId,params).then(((html,js)=>{const conditionCard=_templates.default.appendNodeContents(container,html,js)[0],emptyMessage=container.querySelector(_selectors.default.regions.conditionEmptyMessage),conditionForm=initConditionCardForm(conditionCard);return(0,_changechecker.markFormAsDirty)(conditionForm.getFormNode()),emptyMessage&&emptyMessage.classList.add("hidden"),(0,_str.getString)("conditionadded","local_coursedynamicrules",title)})).then(_toast.add).then((()=>pending.resolve())).catch(_notification.default.exception)})(conditionAdd.dataset.uniqueIdentifier,conditionAdd.dataset.name));const conditionEdit=event.target.closest(_selectors.default.actions.conditionEdit);if(conditionEdit){const conditionCard=conditionEdit.closest(_selectors.default.regions.conditionCard);event.preventDefault(),(conditionCard=>{const pending=new _pending.default("local_coursedynamicrules/conditions:edit");initConditionCardForm(conditionCard).load({id:conditionCard.dataset.conditionId}).then((()=>{const formContainer=conditionCard.querySelector(_selectors.default.regions.conditionFormContainer),description=conditionCard.querySelector(_selectors.default.regions.conditionDescription),editBtn=conditionCard.querySelector(_selectors.default.actions.conditionEdit);return formContainer.classList.remove("hidden"),description&&description.classList.add("hidden"),editBtn&&(editBtn.disabled=!0),pending.resolve()})).catch(_notification.default.exception)})(conditionCard)}})),initialized=!0)}}));

//# sourceMappingURL=conditions.min.js.map