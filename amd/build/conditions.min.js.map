{"version":3,"file":"conditions.min.js","sources":["../src/conditions.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Smart Rules AI - Conditions\n *\n * Mirrors core_reportbuilder/audience.js structure for adding/editing/removing condition cards\n * via fragments and DynamicForm, adapted to condition-* selectors and local component.\n *\n * @module      local_coursedynamicrules/conditions\n */\n\nimport 'core/inplace_editable';\nimport Templates from 'core/templates';\nimport Notification from 'core/notification';\nimport Pending from 'core/pending';\nimport {prefetchStrings} from 'core/prefetch';\nimport {getString} from 'core/str';\nimport DynamicForm from 'core_form/dynamicform';\nimport {add as addToast} from 'core/toast';\nimport {loadFragment} from 'core/fragment';\nimport {markFormAsDirty} from 'core_form/changechecker';\nimport SELECTORS from 'local_coursedynamicrules/local/selectors';\n\nlet courseId = 0;\nlet ruleId = 0;\nlet contextId = 0;\n\n\n/**\n * Add condition card via fragment\n * @param {String} className Fully-qualified condition class name\n * @param {String} title Display title\n */\nconst addConditionCard = (className, title) => {\n    const pending = new Pending('local_coursedynamicrules/conditions:add');\n\n    const container = document.querySelector(SELECTORS.regions.conditionsContainer);\n    const cardsCount = container.querySelectorAll(SELECTORS.regions.conditionCard).length;\n\n    const params = {\n        classname: className,\n        ruleid: ruleId,\n        courseid: courseId,\n        showormessage: (cardsCount > 0),\n        title: title,\n    };\n\n    // Load condition card fragment, render and then initialise the form within.\n    loadFragment('local_coursedynamicrules', 'condition_form', contextId, params)\n        .then((html, js) => {\n            const conditionCard = Templates.appendNodeContents(container, html, js)[0];\n            const emptyMessage = container.querySelector(SELECTORS.regions.conditionEmptyMessage);\n\n            const conditionForm = initConditionCardForm(conditionCard);\n            // Mark as dirty new condition form created to prevent users leaving the page without saving it.\n            markFormAsDirty(conditionForm.getFormNode());\n            if (emptyMessage) {\n                emptyMessage.classList.add('hidden');\n            }\n\n            return getString('conditionadded', 'local_coursedynamicrules', title);\n        })\n        .then(addToast)\n        .then(() => pending.resolve())\n        .catch(Notification.exception);\n};\n\n\n/**\n * Edit condition card\n *\n * @param {Element} conditionCard\n */\nconst editConditionCard = conditionCard => {\n    const pending = new Pending('local_coursedynamicrules/conditions:edit');\n\n    // Load condition form with data for editing, then toggle visible controls in the card.\n    const conditionForm = initConditionCardForm(conditionCard);\n    conditionForm.load({id: conditionCard.dataset.conditionId})\n        .then(() => {\n            const formContainer = conditionCard.querySelector(SELECTORS.regions.conditionFormContainer);\n            const description = conditionCard.querySelector(SELECTORS.regions.conditionDescription);\n            const editBtn = conditionCard.querySelector(SELECTORS.actions.conditionEdit);\n\n            formContainer.classList.remove('hidden');\n            if (description) {\n                description.classList.add('hidden');\n            }\n            if (editBtn) {\n                editBtn.disabled = true;\n            }\n\n            return pending.resolve();\n        })\n        .catch(Notification.exception);\n};\n\n\n/**\n * Initialise dynamic form within given condition card\n *\n * @param {Element} conditionCard\n * @return {DynamicForm}\n */\nconst initConditionCardForm = conditionCard => {\n    const formContainer = conditionCard.querySelector(SELECTORS.regions.conditionFormContainer);\n    const form = new DynamicForm(formContainer, '\\\\local_coursedynamicrules\\\\form\\\\conditions\\\\condition_form');\n\n    // After submitting the form, update the card heading and description.\n    form.addEventListener(form.events.FORM_SUBMITTED, data => {\n        const heading = conditionCard.querySelector(SELECTORS.regions.conditionHeading);\n        const description = conditionCard.querySelector(SELECTORS.regions.conditionDescription);\n\n        // Ensure subsequent edits use the newly created/updated instance id.\n        if (data.detail.instanceid) {\n            conditionCard.dataset.conditionId = data.detail.instanceid;\n        }\n\n        if (data.detail.heading) {\n            heading.innerHTML = data.detail.heading;\n        }\n        if (data.detail.description) {\n            description.innerHTML = data.detail.description;\n        }\n\n        closeConditionCardForm(conditionCard);\n\n        return getString('changessaved', 'moodle')\n            .then(addToast);\n    });\n\n    // If cancelling the form, close the card or remove it if it was never created.\n    form.addEventListener(form.events.FORM_CANCELLED, () => {\n        if (conditionCard.dataset.conditionId > 0) {\n            closeConditionCardForm(conditionCard);\n        } else {\n            removeConditionCard(conditionCard);\n        }\n    });\n\n    return form;\n};\n\n/**\n * Close condition card form\n *\n * @param {Element} conditionCard\n */\nconst closeConditionCardForm = conditionCard => {\n    // Remove the [data-region=\"condition-form-container\"] and create it again to drop listeners.\n    const form = conditionCard.querySelector(SELECTORS.regions.conditionFormContainer);\n    const newForm = form.cloneNode(false);\n    conditionCard.querySelector(SELECTORS.regions.conditionForm).replaceChild(newForm, form);\n    // Show description and enable action buttons.\n    const description = conditionCard.querySelector(SELECTORS.regions.conditionDescription);\n    const editBtn = conditionCard.querySelector(SELECTORS.actions.conditionEdit);\n    const deleteBtn = conditionCard.querySelector(SELECTORS.actions.conditionDelete);\n    if (description) {\n        description.classList.remove('hidden');\n    }\n    if (editBtn) {\n        editBtn.disabled = false;\n    }\n    if (deleteBtn) {\n        deleteBtn.disabled = false;\n    }\n};\n\n/**\n * Remove condition card\n *\n * @param {Element} conditionCard\n */\nconst removeConditionCard = conditionCard => {\n    conditionCard.remove();\n\n    const container = document.querySelector(SELECTORS.regions.conditionsContainer);\n    const cards = container.querySelectorAll(SELECTORS.regions.conditionCard);\n\n    if (cards.length === 0) {\n        const emptyMessage = document.querySelector(SELECTORS.regions.conditionEmptyMessage);\n        if (emptyMessage) {\n            emptyMessage.classList.remove('hidden');\n        }\n    }\n};\n\nlet initialized = false;\n\n/**\n * Initialise conditions tab\n *\n * @param {Object} args\n * @param {Number} args.ruleid Rule id\n * @param {Number} args.courseid Course id\n * @param {Number} args.contextid Course context id\n */\nexport const init = (args) => {\n    prefetchStrings('local_coursedynamicrules', [\n        'conditionadded',\n        'deletecondition',\n        'deleteconditioncheck',\n        'deletedcondition'\n    ]);\n\n    prefetchStrings('core', [\n        'delete'\n    ]);\n\n    ruleId = args.ruleid;\n    courseId = args.courseid;\n    contextId = args.contextid;\n\n    if (initialized) {\n        return;\n    }\n\n    document.addEventListener('click', event => {\n\n        // Add instance.\n        const conditionAdd = event.target.closest(SELECTORS.actions.conditionAdd);\n        if (conditionAdd) {\n            event.preventDefault();\n            addConditionCard(conditionAdd.dataset.uniqueIdentifier, conditionAdd.dataset.name);\n        }\n\n        // Edit instance.\n        const conditionEdit = event.target.closest(SELECTORS.actions.conditionEdit);\n        if (conditionEdit) {\n            const conditionCard = conditionEdit.closest(SELECTORS.regions.conditionCard);\n\n            event.preventDefault();\n            editConditionCard(conditionCard);\n        }\n    });\n\n    initialized = true;\n};\n"],"names":["courseId","ruleId","contextId","initConditionCardForm","conditionCard","formContainer","querySelector","SELECTORS","regions","conditionFormContainer","form","DynamicForm","addEventListener","events","FORM_SUBMITTED","data","heading","conditionHeading","description","conditionDescription","detail","instanceid","dataset","conditionId","innerHTML","closeConditionCardForm","then","addToast","FORM_CANCELLED","removeConditionCard","newForm","cloneNode","conditionForm","replaceChild","editBtn","actions","conditionEdit","deleteBtn","conditionDelete","classList","remove","disabled","document","conditionsContainer","querySelectorAll","length","emptyMessage","conditionEmptyMessage","initialized","args","ruleid","courseid","contextid","event","conditionAdd","target","closest","preventDefault","className","title","pending","Pending","container","cardsCount","params","classname","showormessage","html","js","Templates","appendNodeContents","getFormNode","add","resolve","catch","Notification","exception","addConditionCard","uniqueIdentifier","name","load","id","editConditionCard"],"mappings":"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"}