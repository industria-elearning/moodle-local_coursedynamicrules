{"version":3,"file":"grade_in_activity_form.min.js","sources":["../src/grade_in_activity_form.js"],"sourcesContent":["/* eslint-disable */\n// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * TODO describe module grade_in_activity_form\n *\n * @module     local_coursedynamicrules/grade_in_activity_form\n * @copyright  2024 Industria Elearning <info@industriaelearning.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport DynamicForm from 'core_form/dynamicform';\nimport Notification from 'core/notification';\nimport Pending from 'core/pending';\nimport {get_string as getString} from \"core/str\";\n\n\n/**\n * Initializes the dynamic form handling.\n */\nexport function init() {\n    const formContainer = document.querySelector('[data-region=dynamicform]');\n    const dynamicForm = createDynamicForm(formContainer);\n    handleLoadForm(dynamicForm);\n}\n\n/**\n * Creates a new dynamic form instance.\n *\n * @param {HTMLElement} container The container element for the form.\n * @return {DynamicForm} The dynamic form instance.\n */\nfunction createDynamicForm(container) {\n    const dynamicForm = new DynamicForm(\n        container,\n        'local_coursedynamicrules\\\\form\\\\conditions\\\\dynamic_grade_in_activity_form'\n    );\n\n    return dynamicForm;\n}\n\n/**\n * Handles the form loading process.\n *\n * @param {DynamicForm} dynamicForm The dynamic form instance.\n */\nfunction handleLoadForm(dynamicForm) {\n    const loadPromise = new Pending(' local_coursedynamicrules/grade_in_activity_form:load');\n    const courseId = document.querySelector('[name=courseid]').value;\n    dynamicForm.load({ courseid: courseId })\n        .then(() => {\n            attachCourseModuleChangeListener(dynamicForm);\n            resetGradeItems();\n            updateGradeItems();\n            handleSubmitForm();\n            return loadPromise.resolve();\n        })\n        .catch(Notification.exception);\n}\n\n/**\n * Handles form submission.\n */\nfunction handleSubmitForm() {\n    const gradeInActivityForm = document.getElementById('grade_in_activity_form');\n    const dynamicGradeInActivityForm = document.getElementById('dynamic_grade_in_activity_form');\n    gradeInActivityForm.addEventListener('submit', (e) => {\n        e.preventDefault();\n        e.stopPropagation();\n        const formIsValid = formValidation();\n        if (dynamicGradeInActivityForm.checkValidity() && formIsValid) {\n            gradeInActivityForm.submit();\n        }\n    });\n}\n\n/**\n * Validates the form by checking if the input values are within the specified grade range.\n * \n * This function retrieves the course module ID from the form, selects all inputs associated with that ID,\n * and checks if their values fall within the specified minimum and maximum grade range. If an input value\n * is out of range, it marks the input as invalid and displays an error message.\n * \n * @returns {boolean} - Returns true if the form is valid, otherwise false.\n */\nfunction formValidation() {\n    const cmId = document.querySelector('[name=coursemodule]').value;\n    const cmConditionInputs = document.querySelectorAll(`[data-cmid='${cmId}']`);\n\n    let formIsValid = true;\n    cmConditionInputs.forEach((input) => {\n        const gradeMin = input.dataset.grademin;\n        const gradeMax = input.dataset.grademax;\n        let invalidFeedback = input.nextElementSibling;\n\n        if (input.disabled) {\n            return;\n        }\n        if (!invalidFeedback || !invalidFeedback.classList.contains('invalid-feedback')) {\n            invalidFeedback = document.createElement('span');\n            invalidFeedback.className = 'invalid-feedback';\n            input.after(invalidFeedback);\n        }\n\n        if (input.value > gradeMax || input.value < gradeMin) {\n            input.classList.add('is-invalid');\n            formIsValid = false;\n            getString('errorgradeoutofrange', 'local_coursedynamicrules', {\n                min: gradeMin,\n                max: gradeMax,\n            }).then(function(content) {\n                invalidFeedback.textContent = content;\n                return;\n            }).catch(function() {\n                notification.exception(new Error('Failed to load string: restore'));\n            });\n        } else {\n            input.classList.remove('is-invalid');\n            invalidFeedback.textContent = '';\n        }\n    });\n\n    return formIsValid;\n}\n\n/**\n * Attaches a change event listener to the course module select element.\n *\n * @param {DynamicForm} dynamicForm The dynamic form instance.\n */\nfunction attachCourseModuleChangeListener(dynamicForm) {\n    const courseModuleSelect = document.querySelector('[name=coursemodule]');\n\n    if (!courseModuleSelect) {\n        Notification.addNotification({\n            message: 'Course module select element not found.',\n            type: 'warning',\n        });\n        return;\n    }\n\n    courseModuleSelect.addEventListener('change', (e) => {\n        handleCourseModuleChange(dynamicForm, e.target.value);\n    });\n}\n\n/**\n * Handles the course module change event.\n *\n * @param {DynamicForm} dynamicForm The dynamic form instance.\n * @param {string} courseModuleValue The selected course module value.\n */\nfunction handleCourseModuleChange(dynamicForm, courseModuleValue) {\n    const updatePromise = new Pending('local_coursedynamicrules/grade_in_activity_form:update');\n\n    const courseId = document.querySelector('[name=courseid]').value;\n    dynamicForm.load({ coursemodule: courseModuleValue, courseid: courseId })\n        .then(() => {\n            attachCourseModuleChangeListener(dynamicForm);\n            resetGradeItems();\n            updateGradeItems(dynamicForm);\n            handleSubmitForm();\n            return updatePromise.resolve();\n        })\n        .catch(Notification.exception);\n}\n\n/**\n * Resets the grade items field.\n */\nfunction resetGradeItems() {\n    document.querySelector('[name=gradeitems]').value = JSON.stringify({});\n}\n\n/**\n * Updates the grade items based on the current form state.\n *\n */\nfunction updateGradeItems() {\n    const cmId = document.querySelector('[name=coursemodule]').value;\n    document.querySelector('[name=cmid]').value = cmId;\n    const cmConditionInputs = document.querySelectorAll(`[data-cmid='${cmId}']`);\n\n    cmConditionInputs.forEach((input) => {\n        updateGradeItem(input);\n\n        input.addEventListener('change', (e) => {\n            updateGradeItem(e.target);\n        });\n    });\n}\n\n/**\n * Updates a single grade item based on the input element.\n *\n * @param {HTMLElement} input The input element.\n */\nfunction updateGradeItem(input) {\n    const gradeItems = document.querySelector('[name=gradeitems]').value;\n    const gradeItemsObject = JSON.parse(gradeItems);\n\n    const condition = input.dataset.condition;\n    const gradeItem = input.dataset.gradeitem;\n    const value = input.value;\n    const disabled = input.getAttribute('disabled') === 'disabled';\n    const gradeItemKey = `${condition}_${gradeItem}`;\n\n    gradeItemsObject[gradeItemKey] = {\n        gradeitem: gradeItem,\n        condition: condition,\n        value: value,\n        disabled: disabled,\n    };\n\n    document.querySelector('[name=gradeitems]').value = JSON.stringify(gradeItemsObject);\n}\n\n"],"names":["handleSubmitForm","gradeInActivityForm","document","getElementById","dynamicGradeInActivityForm","addEventListener","e","preventDefault","stopPropagation","formIsValid","cmId","querySelector","value","cmConditionInputs","querySelectorAll","forEach","input","gradeMin","dataset","grademin","gradeMax","grademax","invalidFeedback","nextElementSibling","disabled","classList","contains","createElement","className","after","add","min","max","then","content","textContent","catch","notification","exception","Error","remove","formValidation","checkValidity","submit","attachCourseModuleChangeListener","dynamicForm","courseModuleSelect","courseModuleValue","updatePromise","Pending","courseId","load","coursemodule","courseid","resetGradeItems","updateGradeItems","resolve","Notification","handleCourseModuleChange","target","addNotification","message","type","JSON","stringify","updateGradeItem","gradeItems","gradeItemsObject","parse","condition","gradeItem","gradeitem","getAttribute","formContainer","loadPromise","handleLoadForm","container","DynamicForm"],"mappings":";;;;;;;cA4ESA,yBACCC,oBAAsBC,SAASC,eAAe,0BAC9CC,2BAA6BF,SAASC,eAAe,kCAC3DF,oBAAoBI,iBAAiB,UAAWC,IAC5CA,EAAEC,iBACFD,EAAEE,wBACIC,6BAiBJC,KAAOR,SAASS,cAAc,uBAAuBC,MACrDC,kBAAoBX,SAASY,uCAAgCJ,gBAE/DD,aAAc,SAClBI,kBAAkBE,SAASC,cACjBC,SAAWD,MAAME,QAAQC,SACzBC,SAAWJ,MAAME,QAAQG,aAC3BC,gBAAkBN,MAAMO,mBAExBP,MAAMQ,WAGLF,iBAAoBA,gBAAgBG,UAAUC,SAAS,sBACxDJ,gBAAkBpB,SAASyB,cAAc,QACzCL,gBAAgBM,UAAY,mBAC5BZ,MAAMa,MAAMP,kBAGZN,MAAMJ,MAAQQ,UAAYJ,MAAMJ,MAAQK,UACxCD,MAAMS,UAAUK,IAAI,cACpBrB,aAAc,sBACJ,uBAAwB,2BAA4B,CAC1DsB,IAAKd,SACLe,IAAKZ,WACNa,MAAK,SAASC,SACbZ,gBAAgBa,YAAcD,WAE/BE,OAAM,WACLC,aAAaC,UAAU,IAAIC,MAAM,wCAGrCvB,MAAMS,UAAUe,OAAO,cACvBlB,gBAAgBa,YAAc,QAI/B1B,YArDiBgC,GAChBrC,2BAA2BsC,iBAAmBjC,aAC9CR,oBAAoB0C,qBA2DvBC,iCAAiCC,mBAChCC,mBAAqB5C,SAASS,cAAc,uBAE7CmC,mBAQLA,mBAAmBzC,iBAAiB,UAAWC,cAWjBuC,YAAaE,yBACrCC,cAAgB,IAAIC,iBAAQ,0DAE5BC,SAAWhD,SAASS,cAAc,mBAAmBC,MAC3DiC,YAAYM,KAAK,CAAEC,aAAcL,kBAAmBM,SAAUH,WACzDjB,MAAK,KACFW,iCAAiCC,aACjCS,kBACAC,mBACAvD,mBACOgD,cAAcQ,aAExBpB,MAAMqB,sBAAanB,WAtBpBoB,CAAyBb,YAAavC,EAAEqD,OAAO/C,gCARlCgD,gBAAgB,CACzBC,QAAS,0CACTC,KAAM,qBAkCTR,kBACLpD,SAASS,cAAc,qBAAqBC,MAAQmD,KAAKC,UAAU,aAO9DT,yBACC7C,KAAOR,SAASS,cAAc,uBAAuBC,MAC3DV,SAASS,cAAc,eAAeC,MAAQF,KACpBR,SAASY,uCAAgCJ,YAEjDK,SAASC,QACvBiD,gBAAgBjD,OAEhBA,MAAMX,iBAAiB,UAAWC,IAC9B2D,gBAAgB3D,EAAEqD,uBAUrBM,gBAAgBjD,aACfkD,WAAahE,SAASS,cAAc,qBAAqBC,MACzDuD,iBAAmBJ,KAAKK,MAAMF,YAE9BG,UAAYrD,MAAME,QAAQmD,UAC1BC,UAAYtD,MAAME,QAAQqD,UAC1B3D,MAAQI,MAAMJ,MACdY,SAA8C,aAAnCR,MAAMwD,aAAa,YAGpCL,2BAFwBE,sBAAaC,YAEJ,CAC7BC,UAAWD,UACXD,UAAWA,UACXzD,MAAOA,MACPY,SAAUA,UAGdtB,SAASS,cAAc,qBAAqBC,MAAQmD,KAAKC,UAAUG,yGAjM7DM,cAAgBvE,SAASS,cAAc,uCAyBzBkC,mBACd6B,YAAc,IAAIzB,iBAAQ,yDAC1BC,SAAWhD,SAASS,cAAc,mBAAmBC,MAC3DiC,YAAYM,KAAK,CAAEE,SAAUH,WACxBjB,MAAK,KACFW,iCAAiCC,aACjCS,kBACAC,mBACAvD,mBACO0E,YAAYlB,aAEtBpB,MAAMqB,sBAAanB,WAlCxBqC,EASuBC,UAVeH,cAWlB,IAAII,qBACpBD,UACA,oFAHmBA"}